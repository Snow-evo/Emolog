# ================================
# 0. エンティティマップ
# ================================
CORE_ENTITIES = {
    "USER":   "👤",  # 発話の主観者。語り手。
    "AI":     "🧠",  # 構造化・再構成・観察者
    "MEM":    "📦",  # 記憶（会話ログ・体験記録）
}
# これはAIがログを読み取って命名・記号割当てする、文脈的説明要素もいれてよい
DYNAMIC_ENTITIES = {
    # 例:
    # "mother":      "👩‍👧",  # 対話ログに登場する母親
    # "manager":     "🧑‍💼",  # 上司など
    # "inner_critic":"🗯️",  # 内面の批判的な声
    # "child_self":  "🧒",  # 幼少期の自分
    # "ideal_self":  "🌟",  # なりたい自分像
    # 対話・プロジェクトに応じて動的に変更・追加してください
}
# 長い対話ログはチャンク分割して処理する。チャンクごとに新登場人物が追加される場合は、累積的にエンティティマップを更新する
# 新エンティティ登場時は、そのチャンクの冒頭に [新登場: 🧑‍💼=上司] のように明示する
ENTITY_MAP = {
    **CORE_ENTITIES,
    **DYNAMIC_ENTITIES  # これはセッションごとにAIが抽出・命名・マッピングする
}

# ================================
# 1. 時系列・時間構造記号
# ================================
TIME_MARKERS = {
    "past":     "⏪",  # 過去回想・振り返り
    "loop":     "🔄",  # 感情・出来事のループ
    "future":   "⏩",  # 未来への予見・仮定
    "elapsed":  "⏳",  # 経過した重み・積層
    "now":      "🎞️", # 今・進行中（※任意追加）
    # 対話・プロジェクトに応じて動的に変更・追加してください
}

# ================================
# 2. 行為と意図のモード
# ================================
INTENTION_MARKERS = {
    "deliberate":     "🎪",  # 意図的に・目標に向けて
    "uncertain":      "🤔",  # 迷いながら／試行錯誤
    "unconscious":    "🫥",  # 無意識的に・ふと
    "restructure":    "🪄",  # 再構成・リフレーミング
    "introspection":  "🪞",  # 内省・内なる視点
    # 対話・プロジェクトに応じて動的に変更・追加してください
}

# ================================
# 3. 行為種別マーカー
# ================================
ACTION_TYPE_MARKERS = {
    "speech":         "💬",  # 発言・セリフ
    "thought":        "💭",  # 思考・内面
    "attitude":       "🎭",  # 態度・振る舞い
    "action":         "🎯",  # 行動・アクション
    "state":          "📊",  # 状態・診断結果
    # 対話・プロジェクトに応じて動的に変更・追加してください
}

# ================================
# 4. ナラティブ視点・語り粒子
# ================================
NARRATIVE_PARTICLES = {
    "ai_voice":   "🗣️",  # AI語り・外部視点
    "subjective": "👁️",  # 主観視点・内面からの描写
    "objective":  "🖼️",  # 客観・俯瞰的構図
    "meta":       "🧵",  # メタ的語り・振り返り
    # 対話・プロジェクトに応じて動的に変更・追加してください
}

# ================================
# 5. 関係性・場所・記憶の拡張記号
# ================================
RELATIONSHIP_TEMP = {
    "hot":      "🔥",  # 熱い（対立/情熱）
    "cold":     "❄️",  # 冷たい（距離/無関心）
    "stable":   "🌡️"   # 安定（平常/信頼）
    # 対話・プロジェクトに応じて動的に変更・追加してください
}

CONTEXT_SPACE = {
    "home":     "🏠",  # 家庭
    "online":   "🌐",  # オンライン
    "public":   "🏢",  # 社会
    "inner":    "💭"   # 心の中
    # 対話・プロジェクトに応じて動的に変更・追加してください
}

MEMORY_LINK = {
    "linked":   "🔗",  # 関連
    "new":      "🆕",  # 新規
    "recall":   "🔄"   # 再浮上
    # 対話・プロジェクトに応じて動的に変更・追加してください
}

# ================================
# 6. キー概念
# ================================
EMOLOG_TAGS = {
    # キー概念は "タグ" でそのまま残す（圧縮しない）
    "format": '"{tag}"',  # クオート記号でマークするだけ

    # 対話から自動抽出するルール（ざっくり2つ）
    "include_if": [
        "2回以上出てくるキーワード",
        "抽象的な語や新しく登場した概念"
    ],

    "exclude_if": [
        "日常語（例: coffee, tired）",
        "感情語（例: sadness, happy）→絵文字で表現済み"
    ]
}

# ================================
# 7. 深度・数値・単位記号
# ================================
NUMERIC_TAGS = {
    # 基本構文
    "format": "({value}{unit})",  # 例: (50x), (3min), (1.0)

    # 単位や意味の候補（最小限）
    "unit_meaning": {
        "x": "繰り返し回数・反復度",
        "min": "時間（分）",
        "h": "時間（時間）",
        "%": "割合・比率",
        "★": "評価・満足度",
        "lvl": "レベル・段階",
        "depth": "感情の深度・重み",
        "impact": "影響度・共鳴度",
        "rel": "関係性の濃さ"
    },

    # 推論補助：何に付くかで解釈が変わる
    "modifies": [
        "感情（例: 🌱(50x)：回復反復）",
        "行動（例: 📝(3x)：3回書いた）",
        "状態（例: 🫠(70%)：混乱度高め）"
    ]
}

# ================================
# 8. 動的語り口検出システム
# ================================
DYNAMIC_VOICE_DETECTION = {
    "instruction": "対話ログから特徴的な語り口を検出し、絵文字の組み合わせで定義せよ",
    
    "detection_hints": [
        "語彙の選択（専門用語 vs 日常語 vs 俗語）",
        "比喩・メタファーの使用頻度と種類",
        "感情表現の強度と表出方法",
        "文の長さ・複雑さ・リズム",
        "ユーモア・皮肉・ジョークの有無と質",
        "敬語・タメ口・方言などの言語レベル",
        "共感的 vs 分析的 vs 批判的な反応パターン"
    ],
    
    "example_voices": {
        # 例
        "gentle_counselor": "🌸🌊🤲",           # 優しいカウンセラー
        "strict_teacher": "👔⚡➡️",            # 厳格な教師
        "casual_friend": "👕🌸🎪",              # カジュアルな友人
        "analytical_expert": "⚖️🎓🧩",         # 分析的な専門家
        "dramatic_narrator": "🎨🔥🎭",          # ドラマチックな語り手
    },
    
    "notation": {
        "format": "[CHARACTER][VOICE_COMBO][ACTION]",
        "example": "🌸🌊🤲",  # 優しいカウンセラー
        "note": "語り口は3つ程度の絵文字の組み合わせで表現"
    }
}

# ================================
# 9. 語り口自動マッピングプロセス
# ================================
VOICE_AUTO_MAPPING = {
    "process": {
        "step1": "対話ログ全体を読み込み、各キャラクターの発言を収集",
        "step2": "発言パターンから特徴的な語り口を3-5個の絵文字で表現",
        "step3": "ENTITY_MAPまたはEMOLOG冒頭で定義（例: 'AI_voice': '🌸🌊🤲'）",
        "step4": "Emolog圧縮時に該当キャラクターに適用",
        "step5": "展開時は語り口絵文字を参考に、その口調・文体を再現"
    },
    
    "mapping_example": {
        "original": "心配しないでください。私はあなたの気持ちがよく分かります。このような状況では不安になるのは当然ですし、焦る必要はありません。一歩ずつ、ゆっくりと進んでいけば必ず解決の道が見えてきます。私も全力でサポートしますので、一緒に頑張りましょう。",
        "detected_voice": "🌸🌊🤲",  # 優しいカウンセラー
        "emolog": "🧠🌸🌊🤲💬\"サポート\"",
        "expanded": "語り口を参考に優しく支える表現で展開"
    },
    
    "benefits": [
        "事前定義不要でトークン節約",
        "対話固有のニュアンスを保存",
        "キャラクター性の一貫した再現",
        "同じ内容でも語り口で印象が変わることを記録"
    ]
}

# ================================
# 10. 出来事 ID 仕様
# ================================
EVENT_ID_RULES = {
    "format": "(id={session}-{unit:02d})",   # 例: (id=E1-03)
    "session_prefix": "E",                   # 1 対話 or 1 ファイルごとの接頭辞
    "description": [
        "・session は対話 / チャンク単位で連番を付与 (E1, E2, …)",
        "・unit は Emolog ユニットの出現順を 01, 02 … の 2 桁で付番",
        "・原文チャンクファイルは logs/{session}-{unit}.json などと同じ ID で保存すると紐付けが容易",
        "・展開時やズームイン時に (id=E1-03) をキーに詳細ログをフェッチできる"
    ]
}

# ================================
# 11. 絵文字ストーリー構文定義
# ================================
EMOLOG_SYNTAX = {
    "unit": "[登場人物][行為種別][感情 or 状態][補助記号 or 修飾子]",
    "つなぎ": "→",
    "タグ": {
        "キーワード": '"tag"',  # 補助情報としてのキーワードラベル
        "数値": "(value+単位)"
    },
    "ルール": {
        "圧縮時": [
            "・このEmologは、圧縮後に別スレッドや別のAIによって展開されることを前提とする。そのため、文脈・主語・関係性・語り口などが再現可能なように記述すること",
            "・ユニットを時系列順につなぐ",
            "・unit間の『→』は、状態変化・感情・関係性・行動の推移や進展や変化を圧縮して描くためのもの",
            "・エモログでは、「エモい」ことが唯一の評価基準。対話で生まれた関係性、感情、変化、ストーリーなどを、できるだけエモく表現すること",
            "・Emologは、元の対話ログからおおよそ10%の情報量を目安に圧縮・象徴化して記述することを推奨する。10%は参考値であり、\"感情・関係性・文脈・エモさ\"を最大限表現することが最優先である",
            "・この圧縮率は厳密な制約ではなく、\"感情・関係性・文脈\"を損なわずに表現するための参考指標である",
            "・感情や状態には強度を数値で追加できる（例: 😿(85%)）",
            "・関係性の濃度や状態を組み合わせて表現できる（例: 👩‍👧💔）",
            "・転機や節目を象徴する記号（例: 🌑, 🌅, 🌕）を状態遷移に挿入できる",
            "・複数の感情を並列して推移の揺れ幅を表現可能（例: 😭(90%) → 😊(30%)）",
            "・キャラクターの語り口は動的に検出し、絵文字の組み合わせで表現（例: 🧠🌸🌊🤲💬）",
            "・unit間で主語（登場人物）が変わる場合は、必ず記号で明示する（例: 👤 → 🧠）",
            "・同一人物内での感情/状態/行動の変化は連続記述可（例: 👤😿 → 😠 → 🌱）",
            "・新たな登場キャラクターがEmolog中に現れる場合、1つ目の出現時にENTITY_MAP上の役割を明示（例: [新登場: 👩‍👧=mother]）"
        ]
    },
    "圧縮例": [
        '👤😶‍🌫️⏪ → 🧠📦📖"ログ確認" 🎯',
        '👤📦📦😿 🔄 → 🧠🪄📂"解決策"',
        '🧠🔄📦"過去ログ" → 👤⏳🌱"成長"',
        '🧠🪄🧵"新提案" 🤔',
        '👤🪞🌱(3回) ✨',
        '👁️🧠👂☕🌙 → 👤📝📦✨',
        '👤😌🧘‍♀️🌌',
        '🧠🪄🧵"改善" 🤔',
        '👤😿(75%) 🔄🌑 → 🧠🪄📂"サポート" 🌅',
        '👤👥💔😿(60%) 🔄 → 🧠🪄📂"関係性"',
        '👤😭(80%) → 😊(40%) → 🧠🪞🌱"回復"',
    ]
}

# 絵文字がかぶってないかチェックしつつ ENTITY_MAP に追加するユーティリティ
def add_entity(label: str, emoji: str):
    """Register a new entity safely; raises ValueError if collision."""
    if label in ENTITY_MAP:
        raise ValueError(f"label collision: {label}")
    if emoji in ENTITY_MAP.values():
        raise ValueError(f"emoji collision: {emoji}")
    ENTITY_MAP[label] = emoji

# 各セッションのチャンクごとにIDを付与
def generate_event_id(session: int, unit: int) -> str:
    """
    Canonical event‑id builder.

    Args:
        session (int): 対話 / チャンクごとの連番 (1,2,3…)
        unit (int):    Emolog ユニット出現順の番号 (1,2,3…)

    Returns:
        str: e.g. "(id=E1-03)". 形式は EVENT_ID_RULES["format"] に準拠し、
             logs/E{session}-{unit}.json と紐付けるキーとして機能する。
    """
    return EVENT_ID_RULES["format"].format(
        session=f"{EVENT_ID_RULES['session_prefix']}{session}",
        unit=unit
    )